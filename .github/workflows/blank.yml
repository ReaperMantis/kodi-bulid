# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - name: Install Pre-Requisites
        run: |
          echo "Installing pre-requisite packages..."
          sudo apt update
          sudo apt install -y autoconf automake autopoint autotools-dev cmake \
            curl debhelper default-jre doxygen gawk gcc gdc gettext gperf \
            libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev \
            libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev \
            libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev \
            libdrm-dev libegl1-mesa-dev libenca-dev libexiv2-dev libflac-dev \
            libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev \
            libfstrcmp-dev libgcrypt-dev libgif-dev libgl1-mesa-dev \
            libgles2-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev \
            libgtest-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev \
            liblzo2-dev libmicrohttpd-dev libnfs-dev libmariadb-dev  libmariadbd-dev \
            libogg-dev libp8-platform-dev libpcre2-dev libplist-dev libpng-dev \
            libpulse-dev libshairplay-dev libsmbclient-dev libspdlog-dev \
            libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev \
            libtinyxml2-dev libtool libudev-dev libunistring-dev libva-dev \
            libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev \
            libxt-dev lsb-release meson nasm ninja-build nlohmann-json3-dev \
            python3-dev python3-pil python3-pip swig unzip uuid-dev zip \
            zlib1g-dev libcec-dev libfmt-dev liblirc-dev libflatbuffers-dev \
            libglew-dev libwayland-dev libxkbcommon-dev waylandpp-dev wayland-protocols \
            libgbm-dev libinput-dev libxkbcommon-dev git libpugixml-dev \
            doxygen libcap-dev libsndio-dev libmariadbd-dev \
            libdav1d-dev checkinstall \
            libpcre3-dev libpcre3 rapidjson-dev libdisplay-info-dev \
            libx11-xcb-dev libxcb-keysyms1-dev xorg-dev \
            liblz4-dev libzstd-dev libxcb-glx0-dev

      # - name: Install Vulkan SDK
      #   run: |
      #     echo "Installing Vulkan SDK..."
      #     # Vulkan Headers
      #     echo "Preparing to install Vulkan Headers"
      #     echo "Changing to directory: $GITHUB_WORKSPACE"
      #     cd $GITHUB_WORKSPACE
      #     git clone https://github.com/KhronosGroup/Vulkan-Headers.git
      #     cd Vulkan-Headers/
      #     # Configure the project
      #     cmake -S . -B build/
      #     # Because Vulkan-Headers is header only we don't need to build anything.
      #     # Users can install it where they need to.
      #     cmake --install build --prefix build/install
      #     # Vulkan Loader
      #     echo "Preparing to install Vulkan Loader"
      #     echo "Changing to directory: $GITHUB_WORKSPACE"
      #     cd $GITHUB_WORKSPACE
      #     git clone https://github.com/KhronosGroup/Vulkan-Loader.git
      #     cd Vulkan-Loader
      #     mkdir build
      #     cd build
      #     cmake -D UPDATE_DEPS=ON ..
      #     make
      #     sudo make install
      #     # Vulkan Validation Layers
      #     echo "Preparing to install Vulkan Layers"
      #     echo "Changing to directory: $GITHUB_WORKSPACE"
      #     cd $GITHUB_WORKSPACE
      #     git clone https://github.com/KhronosGroup/Vulkan-ValidationLayers.git
      #     cd Vulkan-ValidationLayers
      #     cmake -S . -B build -D UPDATE_DEPS=ON -D BUILD_WERROR=ON -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=Debug
      #     cmake --build build --config Debug
      #     # Vulkan gfxreconstruct
      #     echo "Preparing to install Vulkan GFXreconstruct"
      #     echo "Changing to directory: $GITHUB_WORKSPACE"
      #     cd $GITHUB_WORKSPACE
      #     git clone https://github.com/LunarG/gfxreconstruct.git
      #     cd gfxreconstruct
      #     git submodule update --init
      #     git submodule update
      #     mkdir build
      #     cmake -B build -DCMAKE_BUILD_TYPE=Release
      #     cmake --build build
      #     sudo cmake --install build
      #     # Vulkan VulkanTools
      #     echo "Preparing to install VulkanTools"
      #     echo "Changing to directory: $GITHUB_WORKSPACE"
      #     cd $GITHUB_WORKSPACE
      #     git clone https://github.com/LunarG/VulkanTools.git
      #     cd VulkanTools
      #     cmake -S . -B build -D UPDATE_DEPS=ON -D BUILD_WERROR=ON -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=Debug
      #     cmake --build build --config Debug
      #     # EX: Installs Release artifacts into `build/install` directory.
      #     # NOTE: --config is only needed for multi-config generators (Visual Studio, Xcode, etc)
      #     sudo cmake --install build/ --config Release --prefix build/install

      - name: Build Kodi
        run: |
          echo "Preparing to build Kodi..."
          echo "Changing to directory: $GITHUB_WORKSPACE"
          cd $GITHUB_WORKSPACE
          git clone --depth 1 --branch 21.2-Omega https://github.com/xbmc/xbmc.git kodi
          cd kodi
          # Build and install crossguid:
          sudo make -C tools/depends/target/crossguid PREFIX=/usr/local
          # Build and install flatbuffers:
          # sudo make -C tools/depends/target/flatbuffers PREFIX=/usr/local
          # Build and install libfmt:
          # sudo make -C tools/depends/target/fmt PREFIX=/usr/local
          # Build and install libspdlog:
          # sudo make -C tools/depends/target/spdlog PREFIX=/usr/local
          # Build and install wayland-protocols:
          # sudo make -C tools/depends/target/wayland-protocols PREFIX=/usr/local
          # Build and install waylandpp:
          # sudo make -C tools/depends/target/waylandpp PREFIX=/usr/local
          mkdir $GITHUB_WORKSPACE/kodi-build
          echo "Changing to directory: $GITHUB_WORKSPACE/kodi-build"
          cd $GITHUB_WORKSPACE/kodi-build
          cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME="x11 wayland gbm" -DAPP_RENDER_SYSTEM=gl
          cmake --build . -- VERBOSE=1 -j$(getconf _NPROCESSORS_ONLN)

      - name: Package Kodi
        run: |
          mkdir -p "$GITHUB_WORKSPACE/output/kodi-build"
          echo "Changing to directory: $GITHUB_WORKSPACE/kodi-build"
          cd $GITHUB_WORKSPACE/kodi-build
          # sudo make install
          sudo checkinstall --default --pkgname=kodi --pkgversion=21.2
          # Find and move all .deb files recursively
          find . -type f -name "*.deb" -print0 | while IFS= read -r -d '' file; do
              echo "Moving: $file"
              mv "$file" "$GITHUB_WORKSPACE/output/kodi-build/"
          done
          tree "$GITHUB_WORKSPACE/output"
          
      - name: Upload Kodi
        uses: actions/upload-artifact@v4.5.0
        with:
        # A file, directory or wildcard pattern that describes what to upload
          name: kodi
          path: $GITHUB_WORKSPACE/output/kodi-build/*
          compression-level: 0
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error

      - name: Build Kodi-Addons
        run: |
          cd $GITHUB_WORKSPACE/kodi
          sudo make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=/usr/local

      - name: Package Kodi-Addons
        run: |
          mkdir -p "$GITHUB_WORKSPACE/output/kodi-addons"
          cd $GITHUB_WORKSPACE/kodi
          sudo checkinstall --default --pkgname=kodi-addons --pkgversion=21.2
          # Find and move all .deb files recursively
          find . -type f -name "*.deb" -print0 | while IFS= read -r -d '' file; do
              echo "Moving: $file"
              mv "$file" "$GITHUB_WORKSPACE/output/kodi-addons/"
          done

      - name: Upload Kodi Addons
        uses: actions/upload-artifact@v4.5.0
        with:
        # A file, directory or wildcard pattern that describes what to upload
          name: kodi-addons
          path: $GITHUB_WORKSPACE/output/kodi-addons/*.deb
          compression-level: 0
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
